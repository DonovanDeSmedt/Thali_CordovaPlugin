'use strict';

var PouchDB = require('PouchDB');
var tape = require('../lib/thali-tape');
var testUtils = require('../lib/testUtils.js');
var ThaliNotificationServer =
  require('thali/NextGeneration/thaliNotificationServer');
var proxyquire = require('proxyquire');
var sinon = require('sinon');
var express = require('express');
var crypto = require('crypto');
var path = require('path');
var Promise = require('lie');
var ThaliSendNotificationBasedOnReplication =
  require('thali/NextGeneration/thaliSEndNotificationBasedOnReplication');
var randomstring = require('randomstring');

var test = tape({
  setup: function (t) {
    t.end();
  },
  teardown: function (t) {
    t.end();
  }
});

function getTestPouchDBInstance(name) {
  // Use a folder specific to this test so that the database content
  // will not interfere with any other databases that might be created
  // during other tests.
  var dbPath = path.join(testUtils.tmpDirectory(),
    'pouch-for-testThaliSendNotificationBasedOnReplication-test');
  var LevelDownPouchDB =
    PouchDB.defaults({db: require('leveldown-mobile'), prefix: dbPath});
  return new LevelDownPouchDB(name);
}

/**
 * @public
 * @typedef {?Buffer[]} startArg This is the value to use in the call to start
 * on the thaliSendNotificationBasedOnReplication object.
 */

/**
 * This function will be passed in the PouchDB object being used in the test
 * so that it can set it up.
 *
 * @public
 * @callback pouchDbInitFunction
 * @param {Object} pouchDB
 * @returns {Promise<?Error>}
 */

/**
 * This callback is used to let the test set up the mock, put documents in
 * the DB, check the constructor functions, etc. The values below that start
 * with 'submitted' are the ones that were generated by the test rig and
 * used to create the thaliSendNotificationServer instance. The values that
 * start with used are the values that were passed on by the
 * thaliSendNotificationServer code when calling the ThaliNotificationServer
 * object.
 *
 * @public
 * @callback mockInitFunction
 * @param {Object} mock
 */

// jscs:disable jsDoc
/**
 * Calls start, lets some user code set things up and then calls finish. The
 * ThaliNotificationServer object is fully mocked and so has to be configured
 * using the mockInitFunction.
 *
 * @param {Object} t The tape status reporting object
 * @param {startArg} startArg
 * @param {pouchDbInitFunction} pouchDbInitFunction
 * @param {mockInitFunction} mockInitFunction
 */
// jscs:enable jsDoc
function testStartAndStop(t, startArg, pouchDbInitFunction, mockInitFunction) {
  var router = express.Router();
  var ecdhForLocalDevice = crypto.createECDH('secp521r1').generateKeys();
  var millisecondsUntilExpiration = 100;
  var randomPouchDBName = randomstring.generate({
    length: 40,
    charset: 'alphabetic'
  });
  var pouchDB = getTestPouchDBInstance(randomPouchDBName);

  var SpyOnThaliNotificationServerConstructor =
    sinon.spy(ThaliNotificationServer);

  var mockThaliNotificationServer = null;

  pouchDbInitFunction(pouchDB)
    .then(function () {
      var MockThaliNotificationServer =
        function (router, ecdhForLocalDevice, millisecondsUntilExpiration) {
          var spyServer = new SpyOnThaliNotificationServerConstructor(router,
                          ecdhForLocalDevice, millisecondsUntilExpiration);
          mockThaliNotificationServer = sinon.mock(spyServer);
          mockInitFunction(mockThaliNotificationServer);
          return spyServer;
        };

      var ThaliSendNotificationBasedOnReplicationProxyquired =
        proxyquire(
          'thali/NextGeneration/thaliSendNotificationBasedOnReplication',
          { './thaliNotificationServer':
          MockThaliNotificationServer});

      var thaliSendNotificationBasedOnReplication =
        new ThaliSendNotificationBasedOnReplicationProxyquired(router,
          ecdhForLocalDevice, millisecondsUntilExpiration, pouchDB);

      thaliSendNotificationBasedOnReplication.start(startArg)
        .then(function () {
          return thaliSendNotificationBasedOnReplication.stop();
        }).then(function () {
        mockThaliNotificationServer.verify();
        t.ok(SpyOnThaliNotificationServerConstructor.calledOnce);
        t.ok(SpyOnThaliNotificationServerConstructor
          .calledWithExactly(router, ecdhForLocalDevice,
                             millisecondsUntilExpiration));
        t.end();
      });
    });
}

test('No peers and empty database', function (t) {
  testStartAndStop(t,
    null,
    function () { return Promise.resolve(); },
    function (mockThaliNotificationServer) {
      mockThaliNotificationServer.expects('start')
        .once()
        .withArgs([])
        .onFirstCall()
        .returns(Promise.resolve());

      mockThaliNotificationServer.expects('stop')
        .once()
        .withArgs()
        .onFirstCall()
        .returns(Promise.resolve());
    });
});

function mockStartAndStop(mockThaliNotificationServer, startArg) {
  mockThaliNotificationServer.expects('start')
    .once()
    .withArgs(startArg)
    .onFirstCall()
    .returns(Promise.resolve());

  mockThaliNotificationServer.expects('stop')
    .once()
    .withArgs()
    .onFirstCall()
    .returns(Promise.resolve());
}

test('One peer and empty DB', function (t) {
  var partnerPublicKey = crypto.createECDH('secp521r1').generateKeys();
  var startArg = [ partnerPublicKey ];
  testStartAndStop(t,
    startArg,
    function () { return Promise.resolve(); },
    function (mockThaliNotificationServer) {
      mockStartAndStop(mockThaliNotificationServer, startArg);
    });
});

test('One peer with _Local set behind current seq', function (t) {
  var partnerPublicKey = crypto.createECDH('secp521r1').generateKeys();
  var startArg = [ partnerPublicKey ];
  testStartAndStop(t,
    startArg,
    function (pouchDB) {
      return pouchDB.put({ _id: 'id', stuff: 'whatever'})
        .then(function () {
          return pouchDB.put(
            {_id: ThaliSendNotificationBasedOnReplication
                   .calculateSeqPointKeyId(partnerPublicKey),
             lastSyncedSequenceNumber: 0});
        });
    },
    function (mockThaliNotificationServer) {
      mockStartAndStop(mockThaliNotificationServer, startArg);
    });
});

test('One peer with _Local set equal to current seq', function (t) {
  var partnerPublicKey = crypto.createECDH('secp521r1').generateKeys();
  var startArg = [ partnerPublicKey ];
  testStartAndStop(t,
    startArg,
    function (pouchDB) {
      return pouchDB.put({ _id: 'id', stuff: 'whatever'})
        .then(function () {
          return pouchDB.put(
            {_id: ThaliSendNotificationBasedOnReplication
              .calculateSeqPointKeyId(partnerPublicKey),
              lastSyncedSequenceNumber: 2});
        });
    },
    function (mockThaliNotificationServer) {
      mockStartAndStop(mockThaliNotificationServer, []);
    });
});

test('One peer with _Local set ahead of current seq (and no this should ' +
     'not happen)', function (t) {
  var partnerPublicKey = crypto.createECDH('secp521r1').generateKeys();
  var startArg = [ partnerPublicKey ];
  testStartAndStop(t,
    startArg,
    function (pouchDB) {
      return pouchDB.put({ _id: 'id', stuff: 'whatever'})
        .then(function () {
          return pouchDB.put(
            {_id: ThaliSendNotificationBasedOnReplication
              .calculateSeqPointKeyId(partnerPublicKey),
              lastSyncedSequenceNumber: 50});
        });
    },
    function (mockThaliNotificationServer) {
      mockStartAndStop(mockThaliNotificationServer, []);
    });
});

test('Three peers, one not in DB, one behind and one ahead', function (t) {
  var partnerNotInDbPublicKey = crypto.createECDH('secp521r1').generateKeys();
  var partnerBehindInDbPublicKey =
    crypto.createECDH('secp521r1').generateKeys();
  var partnerAheadInDbPublicKey = crypto.createECDH('secp521r1').generateKeys();
  var startArg = [ partnerNotInDbPublicKey, partnerBehindInDbPublicKey,
                  partnerAheadInDbPublicKey];
  testStartAndStop(t,
    startArg,
    function (pouchDB) {
      return pouchDB.put({_id: 'id', stuff: 'whatever'})
        .then(function () {
          return pouchDB.put(
            {
              _id: ThaliSendNotificationBasedOnReplication
                .calculateSeqPointKeyId(partnerBehindInDbPublicKey),
              lastSyncedSequenceNumber: 1
            }
        );})
        .then(function () {
          return pouchDB.put(
            {_id: ThaliSendNotificationBasedOnReplication
              .calculateSeqPointKeyId(partnerAheadInDbPublicKey),
            lastSyncedSequenceNumber: 500}
          );
        });
    },
    function (mockThaliNotificationServer) {
      mockStartAndStop(mockThaliNotificationServer,
                       [ partnerNotInDbPublicKey, partnerBehindInDbPublicKey]);
    });
});


// test('Make sure start is idempotent if called with the same arguments',
//  function() {
//
//  });
